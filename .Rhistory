"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.1))
}
models
cat(models[1])
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.2))
}
cat(models[1])
models <- c()
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
load <- rnorm(nitem, mean_load, sd_load)
model[i] <-
str_c(
"f",
i,
"=~",
str_sub(
paste(str_c(load, "*x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.2))
}
models
map2_chr(nfact_vec, nitem_vec, ~gen_model(.x, .y, 0.5, 0.2))
pacman::p_load(lavaan, tidyverse)
map2_chr(nfact_vec, nitem_vec, ~gen_model(.x, .y, 0.5, 0.2))
expand_grid(nfact_vec, nitem_vec)
pmap_chr(expand_grid(nfact_vec, nitem_vec), ~gen_model(.x, .y, 0.5, 0.2))
models <- pmap_chr(expand_grid(nfact_vec, nitem_vec), ~gen_model(.x, .y, 0.5, 0.2))
models <- pmap_chr(
expand_grid(nfact_vec, nitem_vec),
~gen_model(.x, .y, 0.5, 0.2))
models[1] %>% cat()
simulateData(models[1])
?simulateData
data = map(models, ~simulateData(.x, sample.nobs = 5000))
length(data)
data <- expand_grid(nfact_vec, nitem_vec)
models <- pmap_chr(
data,
~gen_model(.x, .y, 0.5, 0.2))
results <- expand_grid(nfact_vec, nitem_vec)
results <- mutate(
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- expand_grid(nfact_vec, nitem_vec)
results <- mutate(
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
results
?walk
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
arrow::write_arrow(results, "C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/results.arrow")
results <- mutate(
results,
lav_fit = map2(model, data, ~cfa(.x, .y))
)
?rbinom
rbinom(100, 100, 0.1)
rbinom(100, 30, 0.3)
rbinom(100, 30, 0.05)
?colSums
?computeOmega
??computeOmega
lavaan::computeOmega
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
datas[[4]]$group = c(rep("1", 25), rep("2", 25), rep("3", 25))
datas[[5]]$group = c(rep("1", 40), rep("2", 40), rep("3", 70))
fits <- map2(models, datas, ~cfa(.x, .y, meanstructure = T, likelihood = "wishart"))
all_equal = c("loadings", "residuals", "residual.covariances", "lv.variances",
"lv.covariances", "regressions")
fits[[4]] <- cfa(models[[4]], datas[[4]], group = "group", group.equal = all_equal,
meanstructure = FALSE)#c("loadings"))
fits[[5]] <- cfa(models[[5]], datas[[5]], group = "group", group.equal = c("loadings",
"regressions"),
meanstructure = FALSE)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss[[1]] %>% summary()
fits_miss_start <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML", do.fit = FALSE))
fits_miss_mean_start <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML", do.fit = FALSE))
start_miss <- map(fits_miss_start, get_testpars)
start_miss_mean <- map(fits_miss_mean_start, get_testpars)
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
start_miss <- map(fits_miss_start, get_testpars)
parameterestimates(fits_miss_mean_start)
parameterestimates(fits_miss_mean_start[[1]])
get_start <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est)
}
start_miss <- map(fits_miss_start, get_start)
start_miss_mean <- map(fits_miss_mean_start, get_start)
start_miss
pacman::p_load(here, feather, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
#----lavaan----
models <- c(one_fact = "f1 =~ x1 + x2 + x3",
three_path =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_mean =
"# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts with fixed values
x1 + x2 + x3 + x4 ~ 0.5*1",
three_path_2 =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_loadeq =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8",
three_path_mean =
"# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
#means
x1 + x2 + x3 ~ a*1
y6 ~ 3*1"
)
datas <-  list(one_fact = HolzingerSwineford1939,
three_path = PoliticalDemocracy,
three_mean = HolzingerSwineford1939,
three_path_2 = PoliticalDemocracy,
three_path_loadeq = bind_rows(PoliticalDemocracy, PoliticalDemocracy),
three_path_mean = PoliticalDemocracy)
induce_missing <- function(v, p){
miss <- sample(c(0,1), length(v), replace = TRUE, prob = c(1-p, p))
ifelse(miss, NA, v)
}
three_path_dat_miss20 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.2)))
three_path_dat_miss30 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.3)))
three_path_dat_miss50 <- mutate(PoliticalDemocracy,
across(everything(), ~induce_missing(., 0.5)))
datas_miss <- list(
dat_miss20 = three_path_dat_miss20,
dat_miss30 = three_path_dat_miss30,
dat_miss50 = three_path_dat_miss50)
fits_miss <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML"))
fits_miss_mean <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML"))
fits_miss_start <- map(datas_miss, ~cfa(models[[2]], data = .x, missing = "FIML", do.fit = FALSE))
fits_miss_mean_start <-
map(datas_miss, ~cfa(models[[6]], data = .x, missing = "FIML", do.fit = FALSE))
fits_miss[[1]]
get_testpars <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est, se, p = pvalue, z)
}
get_start <- function(fit) {
select(parameterEstimates(fit), lhs, op, rhs, est)
}
pars <- map(fits, get_testpars)
pars_miss <- map(fits_miss, get_testpars)
pars_miss_mean <- map(fits_miss_mean, get_testpars)
start_miss <- map(fits_miss_start, get_start)
start_miss_mean <- map(fits_miss_mean_start, get_start)
data_subsets <- map(fits, lavNames, "ov") %>%
map2(datas, ~select(.y, one_of(.x)))
data_subsets_miss <- map(fits_miss, lavNames, "ov") %>%
map2(datas_miss, ~select(.y, one_of(.x)))
get_fitm <- function(fit){
fitm <- fitmeasures(fit)
fitm <- as_tibble(as.list(fitm))
}
fitm <- map(fits, get_fitm)
fitm_miss <- map(fits_miss, get_fitm)
fitm_miss_mean <- map(fits_miss_mean, get_fitm)
imap(data_subsets,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
setwd(r"(C:\Users\maxim\.julia\dev\sem)")
imap(data_subsets_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(pars_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_par_mean.feather")))
imap(start_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_start.feather")))
imap(start_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_start.feather")))
imap(fitm,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm.feather")))
imap(fitm_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_fitm_miss.feather")))
microbenchmark(cfa(models[["three_path"]], datas_miss[[1]], missing = "FIML"))
# generate fake data with two columns
mydata <- data.frame(x=rnorm(10),y=rnorm(10))
# select one column (keep data.frame struc)
md1col <- mydata[, 1, drop=FALSE]
# select two columns (keep data.frame struc)
md2col <- mydata[, 1:2, drop=FALSE]
md1col
md2col
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 })
rs
# when processing md2col, result is of class "matrix" and "array"
# result is in same format
rs2<-t(apply(X=md2col, MARGIN=1, FUN = function(x) { x+1 }))
rs2
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format (should be a data.frame with a single column)
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 })
rs
# when processing md2col, result is of class "matrix" and "array"
# result is in same format
rs2<-t(apply(X=md2col, MARGIN=1, FUN = function(x) { x+1 }))
rs2
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format (should be a data.frame with a single column)
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 })
rs
md1col %>% mutate(across(everything), function(x)x+1)
md1col %>% mutate(across(everything()), function(x)x+1)
md1col %>% mutate(across(everything(), function(x)x+1))
md1col
?mutate
?across
?everything
imap(start_miss,
~write_feather(.x, str_c("test/comparisons/", .y, "_start.feather")))
imap(start_miss_mean,
~write_feather(.x, str_c("test/comparisons/", .y, "_start_mean.feather")))
imap(data_subsets_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par.feather")))
pacman::p_load(here, arrow, tidyverse, lavaan, microbenchmark, magrittr)
set.seed(123)
imap(data_subsets_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_dat.feather")))
imap(pars_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par.feather")))
imap(pars_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par_mean.feather")))
imap(start_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start.feather")))
imap(start_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start_mean.feather")))
imap(data_subsets_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_dat.arrow")))
imap(pars_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par.arrow")))
imap(pars_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par_mean.arrow")))
imap(start_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start.arrow")))
imap(start_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start_mean.arrow")))
fits_miss[[1]] %>% parameterestimates()
imap(data_subsets_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_dat.arrow")))
imap(pars_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par.arrow")))
imap(pars_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par_mean.arrow")))
imap(start_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start.arrow")))
imap(start_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start_mean.arrow")))
pars_miss[[1]]
imap(data_subsets_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_dat.arrow")))
imap(pars_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par.arrow")))
imap(pars_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_par_mean.arrow")))
imap(start_miss,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start.arrow")))
imap(start_miss_mean,
~write_arrow(.x, str_c("test/comparisons/", .y, "_start_mean.arrow")))
fits_miss[[1]] %>% parameterestimates()
?lapply
# generate fake data with two columns
mydata <- data.frame(x=rnorm(10),y=rnorm(10))
# select one column (keep data.frame struc)
md1col <- mydata[, 1, drop=FALSE]
# select two columns (keep data.frame struc)
md2col <- mydata[, 1:2, drop=FALSE]
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 })
# when processing md2col, result is of class "matrix" and "array"
# result is in same format
rs2<-t(apply(X=md2col, MARGIN=1, FUN = function(x) { x+1 }))
rs2
lapply(X=md1col, FUN = function(x) { x+1 })
rs
lapply(X=md1col, FUN = function(x) { x+1 }) %>% as.data.frame()
lapply(X=md1col, FUN = function(x) { x+1 }) %>% as.data.frame
?as.data.frame
lapply(X=md2col, FUN = function(x) { x+1 }) %>% as.data.frame
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 })
# when processing md2col, result is of class "matrix" and "array"
# result is in same format
rs2<-t(apply(X=md2col, MARGIN=1, FUN = function(x) { x+1 }))
rs
rs2
md1col
md2col
?apply
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 }, simplify = FALSe)
# when processing md1col with apply, result is of class "numeric"
# result is in DIFFERENT format
rs<-apply(X=md1col, MARGIN=1, FUN = function(x) { x+1 }, simplify = FALSE)
rs
?lapply
