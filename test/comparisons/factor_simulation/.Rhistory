#fit_188 <- sem(model = m1, data = dat_188, do.fit = FALSE)
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
fit_188 <- sem(model = m1, data = dat_188)
end_time <- Sys.time()
end_time - start_time
install.packages("microbenchmark")
microbenchmark(sem(model = m1, data = dat_188),
times=1000L)
library(microbenchmark)
microbenchmark(sem(model = m1, data = dat_188),
times=50L)
microbenchmark(sem(model = m1, data = dat_188),
times=50L)
install.packages("arrow")
library(arrow)
library(feather)
temp <- read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.feather")
?arrow
tempfile()
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.arrow")
library(lavaan)
library(regsem)
library(tidyverse)
library(feather)
library(microbenchmark)
#### Function for specifying lavaan model depending on number of predictors
#(possibly adding variables for number of trait and method indicators)
# Analyze model
fun_analyze <- function(n_allpred = (n_pred + n_noise)) {
paste("
### Trait variable ###
T =~ 1*t1 + t2 + t3 + m1 + m2 + m3
### Method factor ###
M =~ 1*m1 + m2 + m3
T ~~ 0*M
### Regressing covariates on Trait ###
T =~" ,paste0("x", 1:n_allpred, collapse = " + "), "\n",
paste0("c", 1:n_allpred, " ~~ 1*", "c", 1:n_allpred, "\n", collapse = "" ),
"### Residualizing predictors ###", "\n",
paste0("c", 1:n_allpred, " =~ NA*", "x", 1:n_allpred, "\n", collapse = "" ),
"### restricting manifest predictor error variances ###
",
paste0("x", 1:n_allpred, " ~~ 0*", "x", 1:n_allpred, "\n", collapse = ""),
"### Restricting correlations between Trait and latent predictors ###
T ~~", paste0("0*c", 1:n_allpred, collapse = " + "), "\n",
"\n### Regress method factor on residualized covariates ###
M ~", paste0("c", 1:n_allpred, collapse = " + "))
}
#### Datensatz 1
m1 <- fun_analyze(n_allpred = 19) # specifying lavaan model
dat_188 <- readRDS("C:/Users/maxim/Documents/MPI/sem.jl/konv_reg/Beispiele/data_10_0.1_0.2_1000_r188.rds")
library(arrow)
#write_feather(dat_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.feather")
arrow::write_arrow(data_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.arrow")
dat_188 <- readRDS("C:/Users/maxim/Documents/MPI/sem.jl/konv_reg/Beispiele/data_10_0.1_0.2_1000_r188.rds")
#write_feather(dat_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.feather")
arrow::write_arrow(data_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.arrow")
#write_feather(dat_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.feather")
arrow::write_arrow(dat_188, "C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1.arrow")
?write_ipc_stream
fit_188 <- sem(model = m1, data = dat_188)
fit_188 %>% parameterestimates() %>% write_arrow("C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1_par.arrow")
fit_188 <- sem(model = m1, data = dat_188, do.fit = FALSE)
fit_188 %>% parameterestimates() %>% write_arrow("C:/Users/maxim/.julia/dev/sem/test/comparisons/reg_1_start.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/semtest/comparisons/growth_dat.feather")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/growth_dat.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/growth_dat.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/growth_dat_miss30.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/growth_dat_miss30.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_dat.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_dat.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_dat_unique.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_dat_unique.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_missing.feather")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par_missing.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par_missing.arrow")
temp = read_feather("C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par_missing_unique.feather")
write_arrow(temp, "C:/Users/maxim/.julia/dev/sem/test/comparisons/definition_par_missing_unique.arrow")
pacman::p_load(lavaan)
pacman::p_load(lavaan, stringr)
nfact_vec <- c(3, 5)
nitem_vec <- c(5, 10, 20, 48)
vec <- c()
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
for(i in 1:nfact_vec){
vec[i] = str_c("t", i, "=~", str_c("x_", i, "_", 1:nitem_vec, "+"), "\n")
}
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
for(i in nfact_vec){
vec[i] = str_c("t", i, "=~", str_c("x_", i, "_", 1:nitem_vec, "+"), "\n")
}
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
str_c(1:5, "x")
i = 1
str_c("x_", i, "_", 1:nitem_vec, "+")
paste(str_c("x_", i, "_", 1:nitem_vec, " + "), collapse = "")
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
for(i in nfact_vec){
vec[i] =
str_c(
"t",
i,
"=~",
paste(str_c("x_", i, "_", 1:nitem_vec, " + "), collapse = ""),
"\n")
}
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
vec
vec <- c()
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
for(i in nfact_vec){
vec[i] =
str_c(
"t",
i,
"=~",
paste(str_c("x_", i, "_", 1:nitem_vec, " + "), collapse = ""),
"\n")
}
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
vec
vec <- list()
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
for(i in nfact_vec){
vec[[i]] =
str_c(
"t",
i,
"=~",
paste(str_c("x_", i, "_", 1:nitem_vec, " + "), collapse = ""),
"\n")
}
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
vec
gen_model <- function(nfact_vec, nitem_vec, mean_load, sd_load){
vec = list()
for(i in nfact_vec){
vec[[i]] <-
str_c(
"t",
i,
"=~",
paste(str_c("x_", i, "_", 1:nitem_vec, " + "), collapse = ""),
"\n")
}
return(vec)
}
gen_model(nfact_vec, nitem_vec, 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
vec = list()
for(i in 1:nfact){
vec[[i]] <-
str_c(
"t",
i,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n")
}
return(vec)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
vec = list()
vec <-
str_c(
"t",
1:n_fact,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n")
return(vec)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
vec = list()
vec <-
str_c(
"t",
1:nfact,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n")
return(vec)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <-
paste(
str_c(
"t",
1:nfact,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n"),
collapse = "")
return(vec)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <-
paste(
str_c(
"t",
1:nfact,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n"),
collapse = "")
return(model)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <-
paste(
str_c(
"t",
1:nfact,
"=~",
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
"\n "),
collapse = "")
return(model)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
cat(gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5))
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <-
paste(
str_c(
"t",
1:nfact,
"=~",
str_sub(
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3)
"\n "),
collapse = "")
return(model)
}
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <-
paste(
str_c(
"t",
1:nfact,
"=~",
str_sub(
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n "),
collapse = "")
return(model)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
cat(gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5))
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
model[i] <-
str_c(
"t",
i,
"=~",
str_sub(
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
return(model)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
model[i] <-
str_c(
"t",
i,
"=~",
str_sub(
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5)
cat(gen_model(nfact_vec[1], nitem_vec[1], 0.5, 0.5))
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.5))
}
models <- c()
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
model[i] <-
str_c(
"f",
i,
"=~",
str_sub(
paste(str_c("x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.5))
}
models
cat(models)
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.1))
}
models
models <- c()
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
load <- rnorm(nitem, mean_load, sd_load)
model[i] <-
str_c(
"f",
i,
"=~",
str_sub(
paste(str_c(load, "*x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.1))
}
models
cat(models[1])
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.2))
}
cat(models[1])
models <- c()
gen_model <- function(nfact, nitem, mean_load, sd_load){
model <- c()
for(i in 1:nfact){
load <- rnorm(nitem, mean_load, sd_load)
model[i] <-
str_c(
"f",
i,
"=~",
str_sub(
paste(str_c(load, "*x_", i, "_", 1:nitem, " + "), collapse = ""),
end = -3),
"\n ")
}
model <- paste(model, collapse = "")
return(model)
}
for(nfact in nfact_vec){
for(nitem in nitem_vec)
models <- c(models, gen_model(nfact, nitem, 0.5, 0.2))
}
models
map2_chr(nfact_vec, nitem_vec, ~gen_model(.x, .y, 0.5, 0.2))
pacman::p_load(lavaan, tidyverse)
map2_chr(nfact_vec, nitem_vec, ~gen_model(.x, .y, 0.5, 0.2))
expand_grid(nfact_vec, nitem_vec)
pmap_chr(expand_grid(nfact_vec, nitem_vec), ~gen_model(.x, .y, 0.5, 0.2))
models <- pmap_chr(expand_grid(nfact_vec, nitem_vec), ~gen_model(.x, .y, 0.5, 0.2))
models <- pmap_chr(
expand_grid(nfact_vec, nitem_vec),
~gen_model(.x, .y, 0.5, 0.2))
models[1] %>% cat()
simulateData(models[1])
?simulateData
data = map(models, ~simulateData(.x, sample.nobs = 5000))
length(data)
data <- expand_grid(nfact_vec, nitem_vec)
models <- pmap_chr(
data,
~gen_model(.x, .y, 0.5, 0.2))
results <- expand_grid(nfact_vec, nitem_vec)
results <- mutate(
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- expand_grid(nfact_vec, nitem_vec)
results <- mutate(
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
model =
pmap_chr(results,
~gen_model(.x, .y, 0.5, 0.2)))
results <- mutate(
results,
data = map(model, ~simulateData(.x, sample.nobs = 5000)))
results
?walk
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
pwalk(results,
~with(
list(...),
arrow::write_arrow(
data,
str_c(
"C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/",
"nfact_",
nfact_vec,
"_nitem_",
nitem_vec,
".arrow")
)
)
)
arrow::write_arrow(results, "C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/results.arrow")
results <- mutate(
results,
lav_fit = map2(model, data, ~cfa(.x, .y))
)
?rbinom
rbinom(100, 100, 0.1)
rbinom(100, 30, 0.3)
rbinom(100, 30, 0.05)
?colSums
?computeOmega
??computeOmega
lavaan::computeOmega
pacman::p_load(lavaan, microbenchmark, dplyr)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
data <- readr::read_rds("data.rds")
data
cfa(data$model, data$data, meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
cfa(data$model[[1]], data$data[[1]], meanstructure = TRUE,
missing = "fiml", orthogonal = TRUE,
std.lv = TRUE)
setwd("C:/Users/maxim/.julia/dev/sem/test/comparisons/factor_simulation/")
nfact_vec <- c(3, 5)
nitem_vec <- c(10)#, 5, 20, 48)
nobs <- c(500)
p_missing <- c(0.1)
config <- tidyr::expand_grid(nfact_vec, nitem_vec, nobs, p_missing)
readr::write_csv2(config, "config_factor.csv")
